
/**
* ADT MyStack: Private Part<br>. 
* The class implements all the operations available in MyStack<br>
*/
public class MyStaticStack implements MyStack {

	//--------------------------------------------------
	// Attributes
	//--------------------------------------------------
	private int items[];
	private int numItems;
	private int maxItems;
	//-------------------------------------------------------------------
	// Basic Operation --> Check if myStack is empty: myCreateEmpty
	//-------------------------------------------------------------------	
	//public myStack myCreateEmpty(){}

	public MyStaticStack(int m){
		this.maxItems = m;
		this.items = new int[this.maxItems];
		this.numItems = 0;
	}

	//-------------------------------------------------------------------
	// Basic Operation --> Check if MyStack is empty: isEmpty
	//-------------------------------------------------------------------	

	public boolean isEmpty(){
		//-----------------------------
		//Output Variable --> InitialValue
		//-----------------------------
		boolean res = true;
		
		//-----------------------------
		//SET OF OPS
		//-----------------------------

		//-----------------------------
		// I. SCENARIO IDENTIFICATION
		//-----------------------------
		int scenario = 0;
		//numItems == 0
		if (this.numItems == 0) {
			scenario = 1;
		}
		//numItems > 0
		else if (this.numItems > 0) {
			scenario = 2;
		}
		
		//-----------------------------
		// II. SCENARIO IMPLEMENTATION 
		//-----------------------------
		switch(scenario){
		case 1: 
			break;
		case 2:
			res = false;
			break;
		}
		//-----------------------------
		//Output Variable --> Return FinalValue
		//-----------------------------
		return res;
	}
	
	//-------------------------------------------------------------------
	// Basic Operation (Partial) --> Get and remove first element from top of MyStack: pop
	//-------------------------------------------------------------------

	public int pop(){
		//-----------------------------
		//Output Variable --> InitialValue
		//-----------------------------
		int res = -1;
		
		//-----------------------------
		//SET OF OPS
		//-----------------------------

		//-----------------------------
		// I. SCENARIO IDENTIFICATION
		//-----------------------------
		int scenario = 0;
		//no items in stack
		if (this.numItems == 0) {
			scenario = 1;
		}
		//items in stack
		else {
			scenario = 2;
		}
		
		//-----------------------------
		// II. SCENARIO IMPLEMENTATION 
		//-----------------------------
		switch(scenario){	
		case 1:
			System.out.println("No items in stack.");
			res = 0;
			break;
		case 2:
			//Return value
			res = this.items[0];
			//Move all items one left
			for (int i = 0; i < this.numItems; i++) {
				this.items[i] = this.items[i + 1];
			this.numItems =- 1;
			}
			
			break;
		}
		//-----------------------------
		//Output Variable --> Return FinalValue
		//-----------------------------
		return res;
	}

		
	//-------------------------------------------------------------------
	// Basic Operation (Partial) --> Add element to the top of MyStack: push
	//-------------------------------------------------------------------

	public void push(int element){
		//-----------------------------
		//SET OF OPS
		//-----------------------------
		
		//-----------------------------
		// I. SCENARIO IDENTIFICATION
		//-----------------------------
		int scenario = 0;
		//stack is full
		if (this.numItems == this.maxItems) {
			scenario = 1;
			System.out.println("The sack is full");
		}
		//-----------------------------
		// II. SCENARIO IMPLEMENTATION 
		//-----------------------------
	
		
	//-------------------------------------------------------------------
	// Basic Operation (Partial) --> prints all the elements from MyStack: print
	//-------------------------------------------------------------------

	public void print(){
		
		//-----------------------------
		//SET OF OPS
		//-----------------------------

		//-----------------------------
		// I. SCENARIO IDENTIFICATION
		//-----------------------------
		int scenario = 0;
		//isEmpty()
		if (isEmpty() == true) {
			scenario = 1;
		}
		else {
			scenario = 2;
		}
		//-----------------------------
		// II. SCENARIO IMPLEMENTATION 
		//-----------------------------
		switch (scenario) {
		case 1:
			System.out.println("The stack is empty.");
			break;
		case 2:
			System.out.println(this.numItems);
			for (int i = this.numItems; i >= 0; i--) {
				System.out.println(this.items[i]);
			}
			break;
		}
	}
}
